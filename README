 $ virtualenv env
 $ env/bin/activate
 (env) $ pip install requirements.txt
 (env) $ wget http://www.gaia-gis.it/spatialite/init_spatialite-2.3.sql.gz
 (env) $ gunzip init_spatialite-2.3.sql.gz
 (env) $ spatialite geodjango.db < init_spatialite-2.3.sql

You need to install various libraries system wide
 <https://docs.djangoproject.com/en/1.3/ref/contrib/gis/install/>

in a Debian system you can

 $ apt-get install python-virtualenv python-dev libgeos-c1 libgdal1 libpq-dev postgresql-8.4-postgis

Configurare il database nella seguente maniera
 
    DATABASES = {
        'default': {
             'ENGINE': 'django.contrib.gis.db.backends.postgis',
             'NAME': 'geodatabase',
             'USER': 'geouser',
             'PASSWORD': 'geopassword',
         }
    }

DATABASE
--------

There are some steps involved in creating a Postgis compatible
database

<https://docs.djangoproject.com/en/1.3/ref/contrib/gis/install/#creating-a-spatial-database-template-for-postgis>

 # su postgres
 $ createuser -U postgres geouser -S -D -R
 $ psql -U postgres -c "alter role geouser with password 'geopassword';"
 $ ./create_template_postgis-debian.sh # copy of script from GeoDjango documentation
 $ createdb -U postgres -T template_postgis -O geouser geodatabase

 $ python manage.py  sqlreset places | psql -U <db user> <dbname> -f -
 $ python manage.py loaddata <fixture>

TROUBLESHOOTING
---------------

  * "Cannot determine PostGIS version for database": try to enter into the database
   $ su - postgres
   $ psql geodatabase
   psql (8.4.13)
   Digita "help" per aiuto.

   geodatabase=# select postgis_lib_version();
   <http://blog.kimiensoftware.com/2011/03/postgresql-dropping-a-template-database-47>

PRINCIPI
--------

Generalmente per l'identificazione dell'utente sulla piattaforma
si usa la session_key contenuta nel cookie, mentre per identificare
la geo-room da cui provengono le chiamate AJAX si usa l'header HTTP
chiamato HTTP_REFERER. Utilizzando l'https la sicurezza dei dati
comunicati dovrebbe essere preservata.

HACKING
-------

The frontend is built using component, in order to customize things
and rebuild use

 $ cd home
 $ component build -v --out static --name home --prefix .

VAGRANT
-------

In order to test al these stuffs you can use vagrant

 $ vagrant up
 $ git archive master --format tgz  | \
    ssh vagrant@127.0.0.1 \
        -p 2222 \
        -i ~/.vagrant.d/insecure_private_key \
    -C 'gunzip | tar x'
